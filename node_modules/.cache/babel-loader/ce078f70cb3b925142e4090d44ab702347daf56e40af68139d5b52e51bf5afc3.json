{"ast":null,"code":"var _jsxFileName = \"/home/camilotic/Documents/frontend/TodoApp/src/components/Todomain/Todomain.js\",\n  _s = $RefreshSig$();\n// En Todomain.js\n\nimport React, { useState, useEffect } from 'react';\nimport './Todomain.css';\nimport { TodoFilter } from './componentsTodo/TodoFilter';\nimport { TodoItem } from './componentsTodo/TodoItem';\nimport { TodoCounter } from './componentsTodo/TodoCounter';\nimport { useTasks } from './componentsTodo/useTask'; // Asegúrate que el nombre del archivo importado es correcto\nimport { useDarkMode } from './componentsTodo/useDarkMode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Todomain() {\n  _s();\n  const {\n    tasks,\n    addTask,\n    removeTask,\n    toggleCompleted\n  } = useTasks();\n  const {\n    isDarkMode,\n    toggleDarkMode\n  } = useDarkMode();\n  const [currentSearchText, setCurrentSearchText] = useState('');\n  const [filteredTasks, setFilteredTasks] = useState([]);\n  useEffect(() => {\n    // Actualiza el estado de filteredTasks basado en el texto de búsqueda\n    if (currentSearchText.trim()) {\n      const searchResults = tasks.filter(task => task.text.toLowerCase().includes(currentSearchText.toLowerCase()));\n      setFilteredTasks(searchResults);\n    } else {\n      setFilteredTasks(tasks); // Restablece a todas las tareas cuando no hay texto\n    }\n  }, [currentSearchText, tasks]); // Depende de currentSearchText y tasks\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `App ${isDarkMode ? 'dark-mode' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"dark-mode-button\",\n      onClick: toggleDarkMode,\n      children: [\"Modo \", isDarkMode ? 'Claro' : 'Oscuro']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoCounter, {\n      total: totalTasks,\n      completed: completedTasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoFilter, {\n      addTask: addTask,\n      searchTasks: setCurrentSearchText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredTasks.map(task => /*#__PURE__*/_jsxDEV(TodoItem, {\n        id: task.id,\n        text: task.text,\n        completed: task.completed,\n        onToggleCompleted: toggleCompleted,\n        onRemoveTask: removeTask\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(Todomain, \"eOqAHyx8xRTZYCiTrwDUtR6+w/M=\", false, function () {\n  return [useTasks, useDarkMode];\n});\n_c = Todomain;\nexport default Todomain;\nvar _c;\n$RefreshReg$(_c, \"Todomain\");","map":{"version":3,"names":["React","useState","useEffect","TodoFilter","TodoItem","TodoCounter","useTasks","useDarkMode","jsxDEV","_jsxDEV","Todomain","_s","tasks","addTask","removeTask","toggleCompleted","isDarkMode","toggleDarkMode","currentSearchText","setCurrentSearchText","filteredTasks","setFilteredTasks","trim","searchResults","filter","task","text","toLowerCase","includes","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","total","totalTasks","completed","completedTasks","searchTasks","map","id","onToggleCompleted","onRemoveTask","_c","$RefreshReg$"],"sources":["/home/camilotic/Documents/frontend/TodoApp/src/components/Todomain/Todomain.js"],"sourcesContent":["// En Todomain.js\n\nimport React, { useState, useEffect } from 'react';\nimport './Todomain.css';\nimport { TodoFilter } from './componentsTodo/TodoFilter';\nimport { TodoItem } from './componentsTodo/TodoItem';\nimport { TodoCounter } from './componentsTodo/TodoCounter';\nimport { useTasks } from './componentsTodo/useTask';  // Asegúrate que el nombre del archivo importado es correcto\nimport { useDarkMode } from './componentsTodo/useDarkMode';\n\nfunction Todomain() {\n  const { tasks, addTask, removeTask, toggleCompleted } = useTasks();\n  const { isDarkMode, toggleDarkMode } = useDarkMode();\n\n  const [currentSearchText, setCurrentSearchText] = useState('');\n  const [filteredTasks, setFilteredTasks] = useState([]);\n\n  useEffect(() => {\n    // Actualiza el estado de filteredTasks basado en el texto de búsqueda\n    if (currentSearchText.trim()) {\n      const searchResults = tasks.filter(task =>\n        task.text.toLowerCase().includes(currentSearchText.toLowerCase())\n      );\n      setFilteredTasks(searchResults);\n    } else {\n      setFilteredTasks(tasks); // Restablece a todas las tareas cuando no hay texto\n    }\n  }, [currentSearchText, tasks]); // Depende de currentSearchText y tasks\n\n   return (\n    <div className={`App ${isDarkMode ? 'dark-mode' : ''}`}>\n      <button className=\"dark-mode-button\" onClick={toggleDarkMode}>\n        Modo {isDarkMode ? 'Claro' : 'Oscuro'}\n      </button>\n      <TodoCounter total={totalTasks} completed={completedTasks} />\n      <TodoFilter addTask={addTask} searchTasks={setCurrentSearchText} />\n      <ul>\n        {filteredTasks.map((task) => (\n          <TodoItem\n            key={task.id}\n            id={task.id}\n            text={task.text}\n            completed={task.completed}\n            onToggleCompleted={toggleCompleted}\n            onRemoveTask={removeTask}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Todomain;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}