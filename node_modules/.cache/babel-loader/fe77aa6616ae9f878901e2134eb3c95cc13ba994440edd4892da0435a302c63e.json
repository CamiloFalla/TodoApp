{"ast":null,"code":"var _s = $RefreshSig$();\n// useTasks.js\nimport { useState, useEffect } from 'react';\nfunction useTasks(initial = []) {\n  _s();\n  const [tasks, setTasks] = useState(() => {\n    return [];\n  });\n  const [isLoading, setIsLoading] = useState(true); // Estado para manejar la carga\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    setTimeout(() => {\n      // Simula un pequeño retraso al cargar las tareas\n      try {\n        const storedTasks = localStorage.getItem('tasks');\n        const initialTasks = storedTasks ? JSON.parse(storedTasks) : initial;\n        setTasks(initialTasks);\n        setIsLoading(false); // Establece isLoading a false una vez cargadas las tareas\n      } catch (err) {\n        setError(err);\n        setIsLoading(false);\n      }\n    }, 2000); // Delay de 1 segundo para visualizar el efecto de carga\n  }, []);\n  useEffect(() => {\n    if (!isLoading) {\n      // Asegura que no guardamos mientras inicialmente cargamos las tareas\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n    }\n  }, [tasks, isLoading]);\n  const addTask = text => {\n    if (!text) return;\n    const newTask = {\n      id: Date.now(),\n      text,\n      completed: false\n    };\n    setTasks(prevTasks => [...prevTasks, newTask]);\n  };\n  const removeTask = id => {\n    setTasks(prevTasks => prevTasks.filter(task => task.id !== id));\n  };\n  const toggleCompleted = id => {\n    setTasks(prevTasks => prevTasks.map(task => {\n      if (task.id === id) {\n        return {\n          ...task,\n          completed: !task.completed,\n          completedDate: !task.completed ? new Date() : task.completedDate // Only set date if marking as completed\n        };\n      }\n      return task;\n    }));\n  };\n  return {\n    tasks,\n    isLoading,\n    error,\n    addTask,\n    removeTask,\n    toggleCompleted\n  };\n}\n_s(useTasks, \"qbSMMO4bXHM57+aoL6TixezEANQ=\");\nexport { useTasks };","map":{"version":3,"names":["useState","useEffect","useTasks","initial","_s","tasks","setTasks","isLoading","setIsLoading","error","setError","setTimeout","storedTasks","localStorage","getItem","initialTasks","JSON","parse","err","setItem","stringify","addTask","text","newTask","id","Date","now","completed","prevTasks","removeTask","filter","task","toggleCompleted","map","completedDate"],"sources":["/home/camilotic/Documents/frontend/TodoApp/src/components/Todomain/componentsTodo/useTask.js"],"sourcesContent":["// useTasks.js\nimport { useState, useEffect } from 'react';\n\nfunction useTasks(initial = []) {\n  const [tasks, setTasks] = useState(() => {\n    return [];\n  });\n  const [isLoading, setIsLoading] = useState(true);  // Estado para manejar la carga\n  const [error, setError] =useState(null);\n\n  useEffect(() => {\n    setTimeout(() => {  // Simula un pequeño retraso al cargar las tareas\n      try {\n        const storedTasks = localStorage.getItem('tasks');\n        const initialTasks = storedTasks ? JSON.parse(storedTasks) : initial;\n        setTasks(initialTasks);\n        setIsLoading(false);  // Establece isLoading a false una vez cargadas las tareas\n      } catch (err){\n        setError(err);\n        setIsLoading(false);\n      }\n      \n    }, 2000); // Delay de 1 segundo para visualizar el efecto de carga\n  }, []);\n\n  useEffect(() => {\n    if (!isLoading) {  // Asegura que no guardamos mientras inicialmente cargamos las tareas\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n    }\n  }, [tasks, isLoading]);\n\n  const addTask = (text) => {\n    if (!text) return;\n    const newTask = { id: Date.now(), text, completed: false };\n    setTasks((prevTasks) => [...prevTasks, newTask]);\n  };\n\n  const removeTask = (id) => {\n    setTasks((prevTasks) => prevTasks.filter((task) => task.id !== id));\n  };\n\n  const toggleCompleted = (id) => {\n    setTasks(prevTasks =>\n      prevTasks.map(task => {\n        if (task.id === id) {\n          return {\n            ...task,\n            completed: !task.completed,\n            completedDate: !task.completed ? new Date() : task.completedDate // Only set date if marking as completed\n          };\n        }\n        return task;\n      })\n    );\n  };\n\n  return { tasks, isLoading, error, addTask, removeTask, toggleCompleted };\n}\n\nexport { useTasks };\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SAASC,QAAQA,CAACC,OAAO,GAAG,EAAE,EAAE;EAAAC,EAAA;EAC9B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,MAAM;IACvC,OAAO,EAAE;EACX,CAAC,CAAC;EACF,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;EACnD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAEV,QAAQ,CAAC,IAAI,CAAC;EAEvCC,SAAS,CAAC,MAAM;IACdU,UAAU,CAAC,MAAM;MAAG;MAClB,IAAI;QACF,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QACjD,MAAMC,YAAY,GAAGH,WAAW,GAAGI,IAAI,CAACC,KAAK,CAACL,WAAW,CAAC,GAAGT,OAAO;QACpEG,QAAQ,CAACS,YAAY,CAAC;QACtBP,YAAY,CAAC,KAAK,CAAC,CAAC,CAAE;MACxB,CAAC,CAAC,OAAOU,GAAG,EAAC;QACXR,QAAQ,CAACQ,GAAG,CAAC;QACbV,YAAY,CAAC,KAAK,CAAC;MACrB;IAEF,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;EAENP,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,SAAS,EAAE;MAAG;MACjBM,YAAY,CAACM,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,SAAS,CAACf,KAAK,CAAC,CAAC;IACtD;EACF,CAAC,EAAE,CAACA,KAAK,EAAEE,SAAS,CAAC,CAAC;EAEtB,MAAMc,OAAO,GAAIC,IAAI,IAAK;IACxB,IAAI,CAACA,IAAI,EAAE;IACX,MAAMC,OAAO,GAAG;MAAEC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MAAEJ,IAAI;MAAEK,SAAS,EAAE;IAAM,CAAC;IAC1DrB,QAAQ,CAAEsB,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAEL,OAAO,CAAC,CAAC;EAClD,CAAC;EAED,MAAMM,UAAU,GAAIL,EAAE,IAAK;IACzBlB,QAAQ,CAAEsB,SAAS,IAAKA,SAAS,CAACE,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACP,EAAE,KAAKA,EAAE,CAAC,CAAC;EACrE,CAAC;EAED,MAAMQ,eAAe,GAAIR,EAAE,IAAK;IAC9BlB,QAAQ,CAACsB,SAAS,IAChBA,SAAS,CAACK,GAAG,CAACF,IAAI,IAAI;MACpB,IAAIA,IAAI,CAACP,EAAE,KAAKA,EAAE,EAAE;QAClB,OAAO;UACL,GAAGO,IAAI;UACPJ,SAAS,EAAE,CAACI,IAAI,CAACJ,SAAS;UAC1BO,aAAa,EAAE,CAACH,IAAI,CAACJ,SAAS,GAAG,IAAIF,IAAI,CAAC,CAAC,GAAGM,IAAI,CAACG,aAAa,CAAC;QACnE,CAAC;MACH;MACA,OAAOH,IAAI;IACb,CAAC,CACH,CAAC;EACH,CAAC;EAED,OAAO;IAAE1B,KAAK;IAAEE,SAAS;IAAEE,KAAK;IAAEY,OAAO;IAAEQ,UAAU;IAAEG;EAAgB,CAAC;AAC1E;AAAC5B,EAAA,CAtDQF,QAAQ;AAwDjB,SAASA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}