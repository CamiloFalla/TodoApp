{"ast":null,"code":"var _s = $RefreshSig$();\n// useTasks.js\nimport { useState, useEffect } from 'react';\nfunction useTasks(initial = []) {\n  _s();\n  const [tasks, setTasks] = useState(() => {\n    const storedTasks = localStorage.getItem('tasks');\n    return storedTasks ? JSON.parse(storedTasks) : initial;\n  });\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n  const addTask = text => {\n    if (!text) return;\n    const newTask = {\n      id: Date.now(),\n      text,\n      completed: false\n    };\n    setTasks(prevTasks => [...prevTasks, newTask]);\n  };\n  const removeTask = id => {\n    setTasks(prevTasks => prevTasks.filter(task => task.id !== id));\n  };\n  const toggleCompleted = id => {\n    setTasks(prevTasks => prevTasks.map(task => task.id === id ? {\n      ...task,\n      completed: !task.completed\n    } : task));\n  };\n  return {\n    tasks,\n    addTask,\n    removeTask,\n    toggleCompleted\n  };\n}\n_s(useTasks, \"f1MSyq1u0Fswe/67pyFNofVr/bs=\");\nexport { useTasks };","map":{"version":3,"names":["useState","useEffect","useTasks","initial","_s","tasks","setTasks","storedTasks","localStorage","getItem","JSON","parse","setItem","stringify","addTask","text","newTask","id","Date","now","completed","prevTasks","removeTask","filter","task","toggleCompleted","map"],"sources":["/home/camilotic/Documents/frontend/TodoApp/src/components/Todomain/componentsTodo/useTask.js"],"sourcesContent":["// useTasks.js\nimport { useState, useEffect } from 'react';\n\nfunction useTasks(initial = []) {\n  const [tasks, setTasks] = useState(() => {\n    const storedTasks = localStorage.getItem('tasks');\n    return storedTasks ? JSON.parse(storedTasks) : initial;\n  });\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n\n  const addTask = (text) => {\n    if (!text) return;\n    const newTask = { id: Date.now(), text, completed: false };\n    setTasks((prevTasks) => [...prevTasks, newTask]);\n  };\n\n  const removeTask = (id) => {\n    setTasks((prevTasks) => prevTasks.filter((task) => task.id !== id));\n  };\n\n  const toggleCompleted = (id) => {\n    setTasks((prevTasks) =>\n      prevTasks.map((task) => \n        task.id === id ? { ...task, completed: !task.completed } : task)\n    );\n  };\n\n  return { tasks, addTask, removeTask, toggleCompleted };\n}\n\nexport { useTasks };"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SAASC,QAAQA,CAACC,OAAO,GAAG,EAAE,EAAE;EAAAC,EAAA;EAC9B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,MAAM;IACvC,MAAMO,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACjD,OAAOF,WAAW,GAAGG,IAAI,CAACC,KAAK,CAACJ,WAAW,CAAC,GAAGJ,OAAO;EACxD,CAAC,CAAC;EAEFF,SAAS,CAAC,MAAM;IACdO,YAAY,CAACI,OAAO,CAAC,OAAO,EAAEF,IAAI,CAACG,SAAS,CAACR,KAAK,CAAC,CAAC;EACtD,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAMS,OAAO,GAAIC,IAAI,IAAK;IACxB,IAAI,CAACA,IAAI,EAAE;IACX,MAAMC,OAAO,GAAG;MAAEC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MAAEJ,IAAI;MAAEK,SAAS,EAAE;IAAM,CAAC;IAC1Dd,QAAQ,CAAEe,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAEL,OAAO,CAAC,CAAC;EAClD,CAAC;EAED,MAAMM,UAAU,GAAIL,EAAE,IAAK;IACzBX,QAAQ,CAAEe,SAAS,IAAKA,SAAS,CAACE,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACP,EAAE,KAAKA,EAAE,CAAC,CAAC;EACrE,CAAC;EAED,MAAMQ,eAAe,GAAIR,EAAE,IAAK;IAC9BX,QAAQ,CAAEe,SAAS,IACjBA,SAAS,CAACK,GAAG,CAAEF,IAAI,IACjBA,IAAI,CAACP,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGO,IAAI;MAAEJ,SAAS,EAAE,CAACI,IAAI,CAACJ;IAAU,CAAC,GAAGI,IAAI,CACnE,CAAC;EACH,CAAC;EAED,OAAO;IAAEnB,KAAK;IAAES,OAAO;IAAEQ,UAAU;IAAEG;EAAgB,CAAC;AACxD;AAACrB,EAAA,CA5BQF,QAAQ;AA8BjB,SAASA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}